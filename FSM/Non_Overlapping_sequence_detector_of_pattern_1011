library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

---------------Non overlapping sequence of 1011-----------------

entity NOV_1 is
	port(
			rst,clk,din : in std_logic;
			dout : out std_logic
		);
end NOV_1;

architecture NOV_2 of NOV_1 is
type state_type is (s0,s1,s2,s3);
signal state,next_state : state_type := s0;
begin

reset_logic: process(clk)
begin
if(rising_edge(clk)) then
   if(rst = '1') then
     state <= s0;
   else 
     state <= next_state;
   end if;
end if;
end process;

next_state_logic: process(state,din)
begin
case(state) is
when s0 => 
 if(din = '1') then
    next_state <= s1;
    dout <= '0';
 else
    next_state <= s0;
    dout <= '0';
 end if;
     
when s1 => 
 if(din = '0') then
    next_state <= s2;
    dout <= '0';   
 else
    next_state <= s1;
    dout <= '0';   
 end if;
 
 when s2 => 
 if(din = '1') then
    next_state <= s3;
    dout <= '0';   
 else
    next_state <= s0;
    dout <= '0';   
 end if;
 
 
 when s3 => 
 if(din = '1') then
    next_state <= s0;
    dout <= '1';   
 else
    next_state <= s2;
    dout <= '0';   
 end if;
 
 when others =>
   next_state <= s0;
   dout <= '0';
end case;
end process;
end NOV_2;



-----------------------testbench code------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity ov1tb is
end ov1tb;

architecture ov2tb of ov1tb is
component NOV_1 is
	port(
		rst,clk,din : in std_logic;
		dout : out std_logic
	);
end component;

signal rst,clk,din,dout : std_logic ;
signal sequence : std_logic_vector(11 downto 0) := "101110111000";

begin

T1 : NOV_1 port map (rst => rst , clk => clk , din => din , dout => dout);

clk_sim : process(clk)
begin
if clk = '1' then
    clk <= '0' after 100 ns;
else
    clk <= '1' after 100 ns;
end if;
end process;

process(clk)
variable ind : integer range 0 to 12 := 0; 
begin
	if(rising_edge(clk)) then
		if(rst = '1') then
			ind := 0;
	
		else
			ind := ind + 1;
		end if;
	
		if(ind = 11) then
			rst <= '1';
		else
			rst <= '0';
		end if;
	end if;
din <= sequence(11-ind);
end process;
end ov2tb;

